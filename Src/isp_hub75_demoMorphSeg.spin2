'' =================================================================================================
''
''   File....... isp_hub75_demoMorphSeg.spin2
''   Purpose.... Top-level Demonstration - showing off our HUB75 matrix w/Morphing 7 segment displays
''   Authors.... Stephen M Moraco
''               -- Copyright (c) 2021 Iron Sheep Productions, LLC
''               -- see below for terms of use
''   E-mail..... stephen@ironsheep.biz
''   Started.... Jan 2021
''   Updated.... 21 Jan 2021
''
'' =================================================================================================


CON { timing }

  CLK_FREQ = 335_000_000                                        ' system freq as a constant
  _clkfreq = CLK_FREQ                                           ' set system clock

CON { DEBUG PINs }

'DEBUG_PIN = 0

CON { Display constants }

MAX_COUNTERS = 4

#0, GRP_CLOCK_LT, GRP_CLOCK_RT, GRP_DOWNCTR_2DIG, GRP_CTR_6DIG_RAND

VAR

    long    cog
    long    segmentPeriod
    long    digitPeriod
    long    digitVal
    long    digitIndex
    long    hours
    long    hours24
    long    minutes
    long    digitHeight
    long    digitWidth
    long    segmentThickness   ' FIXME UNDONE, not plumbed thru yet
    ' 1st clock group
    long    clkLtWidth
    long    clkLtHeight
    long    clkRtWidth
    long    clkRtHeight
    long    grpDnWidth
    long    grpDnHeight
    long    grpRndWidth
    long    grpRndHeight

OBJ

    color                   : "isp_hub75_color"
    display                 : "isp_hub75_display"
    counters[MAX_COUNTERS]  : "isp_hub75_morphCounters"
    screen                  : "isp_hub75_screenAccess"

PUB start() : ok | ctrIdx
    '' Start underlying drivers and run demo

    'debug("`term temp size 82 50 textsize 10")

    ok := cog := display.start()   ' send buffer to driver
    if ok == -1
        debug("- DEMO: underlying drivers failed!")
        abort

    '  multiple SEVEN SEGMENT Morphing Digits DEMO
    repeat ctrIdx from 0 to MAX_COUNTERS -1
        counters[ctrIdx].initialize()

    display.clearScreen()

        ' draw some text!
    display.setTextFont(display.TEXT_FONT_5x7)    ' font size
    display.setCursor(0, 0)   ' start at top left, with one pixel of spacing
    display.setColoredTextAtLnCol(0,0, string("Iron Sheep"), color.cMaroon)
    display.commitScreenToPanel()

    clkLtWidth, clkLtHeight := counters[GRP_CLOCK_LT].placeDigitGroup(10, 2, counters.GRP_CLOCK, 4, 1, 6, 0, color.cOrange)

    if screen.MAX_PHYSICAL_COLUMNS > 64
        clkRtWidth, clkRtHeight := counters[GRP_CLOCK_RT].placeDigitGroup(8, 64+2, counters.GRP_CLOCK, 4, 1, 6, 12 * 60, color.cGreen)

    if screen.MAX_PHYSICAL_ROWS > 32
        grpDnWidth, grpDnHeight := counters[GRP_DOWNCTR_2DIG].placeDigitGroup(28, 3, counters.GRP_DOWN_COUNTER, 3, 1, 15, 204, color.cTeal)

    if screen.MAX_PHYSICAL_COLUMNS > 64 && screen.MAX_PHYSICAL_ROWS > 32
        grpRndWidth, grpRndHeight := counters[GRP_CTR_6DIG_RAND].placeDigitGroup(32, 64+4, counters.GRP_DIGITS_RANDOM, 4, 1, 9, 5436, color.cRed)

    display.commitScreenToPanel()
    'repeat

    repeat
        stepIdleCounters()
        animateActiveCounters()

    debug("DEMO: done")
    stop()

PRI stepIdleCounters() | ctrIndex, bDidStep
    bDidStep := FALSE
    repeat ctrIndex from 0 to MAX_COUNTERS - 1
        if counters[ctrIndex].isConfigured() && counters[ctrIndex].isAnimationComplete()
            counters[ctrIndex].nextTimeCycle()
            bDidStep := TRUE
    if bDidStep
        display.commitScreenToPanel()

PRI animateActiveCounters() | ctrIndex, bDidAnimate
    bDidAnimate := FALSE
    if not allCounterAnimationsComplete()
        repeat ctrIndex from 0 to MAX_COUNTERS - 1
            if not counters[ctrIndex].isAnimationComplete()
                counters[ctrIndex].animateStep()
                bDidAnimate := TRUE
    if bDidAnimate
        display.commitScreenToPanel()

PRI allCounterAnimationsComplete() : status | ctrIndex
    status := TRUE
    repeat ctrIndex from 0 to MAX_COUNTERS - 1
        if not counters[ctrIndex].isAnimationComplete()
            status := FALSE
            quit


{
    repeat
        passTime()                      ' seed the next animations
        display.commitScreenToPanel()   ' show screen changes
        loopUntilCountersFinish()       ' let animations complete

PRI passTime() | ctrIndex
    waitSecs(1)
    repeat ctrIndex from 0 to MAX_COUNTERS - 1
        if counters[ctrIndex].isConfigured()
            counters[ctrIndex].nextTimeCycle()

PRI loopUntilCountersFinish() | ctrIndex
    repeat
        if not allCounterAnimationsComplete()
            repeat ctrIndex from 0 to MAX_COUNTERS - 1
                if not counters[ctrIndex].isAnimationComplete()
                    counters[ctrIndex].animateStep()
            display.commitScreenToPanel()
            'wait100thSecs(segmentPeriod)
            'waitSecs(2)

        if allCounterAnimationsComplete()
            quit
'}

PRI wait100thSecs(count)
    ' Wait for {count} 100ths of a second
    if count > 0
        repeat count
            waitms(10)  ' 1/100 seconds

PRI waitSecs(count)
    ' Wait for {count} 100ths of a second
    if count > 0
        repeat count
            waitms(1000)  ' 1 seconds


PRI stop()
    ' Stop the driver
    if cog
        display.stop()
        cog := 0

CON { license }

{{


 -------------------------------------------------------------------------------------------------
  MIT License

  Copyright (c) 2021 Iron Sheep Productions, LLC

  Permission is hereby granted, free of charge, to any person obtaining a copy
  of this software and associated documentation files (the "Software"), to deal
  in the Software without restriction, including without limitation the rights
  to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
  copies of the Software, and to permit persons to whom the Software is
  furnished to do so, subject to the following conditions:

  The above copyright notice and this permission notice shall be included in all
  copies or substantial portions of the Software.

  THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
  FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
  AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
  LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
  OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
  SOFTWARE.
 =================================================================================================
}}
